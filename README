world-cup-2014-dream-team
=========================

Choose your World Cup 2014 dream team

REQUIREMENTS
    * nodejs
    * mongodb (for local db development)

SETUP
    Running locally will use a simulation of the Guardian next-gen site with a
    debug user. Data is read and written to the live server so an internet
    connection is required. 

    > npm install
    > grunt

FOOTBALL PLAYER DATABASE
    The football player database is hosted on Google spreadsheets and is loaded
    into the application while in development. The data will be downloaded and
    included within the final production build.

    https://docs.google.com/a/guardian.co.uk/spreadsheet/ccc?key=0AkRR3zKqdlUHdFE5SjJtS3gyUHF3ZEcwYlF0SHgxbkE


URLs
    The client side URL's are part of the guardinan.com domain and use hash
    fragments for routing.

    The base folder will act as the default route and will display the primary
    team edit view.

    A player's current team can be views on the 'match' route when their ID is
    specified.

    A match takes place between two players when two valid IDs are provided.

    /                           - Team construction and edit page
    /#match/:userID             - Player's team view
    /#match/:userID/:userID2    - Match view between two players
    /#result/:matchID           - (preliminary) past match result

    Creation and updating of a user's team is handles by the data-store
    server. The server is a REST based API to a Mongo DB.

    http://ec2-54-195-231-244.eu-west-1.compute.amazonaws.com/
   
    The server accepts the following end-points:

    GET  /allusers          - DEBUG: Get all registered users
    GET  /users/?guardianID - Get user data by ID
    GET  /users/:userid     - Get user data by 
    POST /users/:userid     - Create user
    PUT  /users/:userid     - Update user data


USER DATASTORE
    User's teams are stored in a Mongo database hosted on an Amazon EC2
    instance.

    InstanceID: i-b701e6f4 (interactive:world-cup dream dream datastore)
    URL:        ec2-54-195-231-244.eu-west-1.compute.amazonaws.com


    As part of the database set-up, ensure the user's Guardian ID is unique.

    db.users.ensureIndex( { 'guardianID': 1 }, { unique: true });

USER DATA STRUCTURE
    {
        guardianID: String,     - User's Guardian ID
        username: String,       - Is this needed? Can use use identity API?
        teamSelection: String   - Comma separated list of player IDs
    }


MATCH RESULTS
    When a match is played against two users the result is stored in the
    results collection. The initialising user needs to be logged in to create a
    match result. A user can create new match results by playing the match
    again. Each match result has an addressable ID that can be shared. The total
    number of matches that two users have played against each over is displayed.

    POST /results           - Create a new match result
    GET  /results/:resultid - Get a result by ID

RESULT MODEL
    {
        resultID: String    - Unique ID used to reference match result
        user1: String       - User one's unique ID (Mongo object ID)
        user2: String       - User two's unqiue ID (Mongo object ID)
        user1Lineup: String - User one's team line-up
        user2Lineup: String - User two's team line-up
        user1Score: String  - User one score
        user2Score: String  - User two score
    }

